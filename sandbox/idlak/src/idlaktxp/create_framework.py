# This python script takes the feature function code and the distance
# metric code and autogenerates a couple of C files to allow the
# functions to be selected run time.

import os, sys, string, re, glob, time


PAULOOKUP = {"CUR":"FEXSPECPAU_TYPE_CUR", "PRE":"FEXSPECPAU_TYPE_PRE", "PST":"FEXSPECPAU_TYPE_PST"}

TYPELOOKUP = {"STR":"FEXSPEC_TYPE_STR", "INT":"FEXSPEC_TYPE_INT"}

def get_fex_details(srcdir):
    feat_details = []
    files = glob.glob(srcdir + '/*.cc')
    for f in files:
        data = open(f).read()
        pat = re.match(".*?\n\s*(bool\s+FexFunc(PRE|PST|CUR)(STR|INT)(\S+)\(.*?\))(.*)",
                       data, re.MULTILINE | re.DOTALL)
        while pat:
            print pat.group(4)
            data = pat.group(5)
            #function signature, pause handling, type, name
            feat_details.append([pat.group(1), pat.group(2), pat.group(3), pat.group(4)])
            pat = re.match(".*?\n\s*(bool\s+FexFunc(PRE|PST|CUR)(STR|INT)(\S+)\(.*?\))(.*)",
                           data, re.MULTILINE | re.DOTALL)
    return feat_details


def generate_fex_catalog_h(srcdir, feat_details):
    fp = open(os.path.join(srcdir, "fexfunctions.h"), 'w')
    fex_h_head = FEX_CATALOG_H_HEAD.replace("$TIME$", time.asctime())
    fex_h_head = fex_h_head.replace("$NO_FEATURES$", str(len(feat_details)))
    fp.write(fex_h_head)
    for feat in feat_details:
        fp.write(feat[0] + ";\n\n")
    fp.write(FEX_CATALOG_H_TAIL)
    fp.close()

def generate_fex_catalog_c(srcdir, feat_details):
    fp = open(os.path.join(srcdir, "fexfunctionscatalog.cc"), 'w')
    fex_h_head = FEX_CATALOG_C_HEAD.replace("$TIME$", time.asctime())
    fp.write(fex_h_head)

    fp.write(FEX_CATALOG_C_LINES["lbls"])
    for feat in feat_details[:-1]:
        fp.write('"' + feat[3] + '", ')
    fp.write('"' + feat_details[-1][3] + '"};\n\n')
    
    fp.write(FEX_CATALOG_C_LINES["funcs"])
    for feat in feat_details[:-1]:
        fp.write('&FexFunc' + feat[1] + feat[2] + feat[3] + ', ')
    fp.write('&FexFunc' + feat_details[-1][1] + feat_details[-1][2]
             + feat_details[-1][3] + '};\n\n')

    fp.write(FEX_CATALOG_C_PAUSEHELP)
    
    fp.write(FEX_CATALOG_C_LINES["pausehand"])
    for feat in feat_details[:-1]:
        fp.write('' + PAULOOKUP[feat[1]] + ', ')
    fp.write('' + PAULOOKUP[feat_details[-1][1]] + '};\n\n')

    fp.write(FEX_CATALOG_C_TYPEHELP)

    fp.write(FEX_CATALOG_C_LINES["type"])
    for feat in feat_details[:-1]:
        fp.write('' + TYPELOOKUP[feat[2]] + ', ')
    fp.write('' + TYPELOOKUP[feat_details[-1][2]] + '};\n\n')

    fp.write("}  // namespace kaldi\n")

FEX_CATALOG_H_HEAD = """// idlaktxp/fexfunctions.h

// Copyright 2013 CereProc Ltd.  (Author: Matthew Aylett)

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
// WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
// MERCHANTABLITY OR NON-INFRINGEMENT.
// See the Apache 2 License for the specific language governing permissions and
// limitations under the License.
//

// Automatically generated: $TIME$

#ifndef SRC_IDLAKTXP_FEXFUNCTIONS_H
#define SRC_IDLAKTXP_FEXFUNCTIONS_H

// This file autogenerated by running create_catalog.py
// Do not edit manually

#include "./txpfexspec.h"

namespace kaldi {

#define FEX_NO_FEATURES $NO_FEATURES$

"""


FEX_CATALOG_H_TAIL = """

}  // namespace kaldi

#endif  // SRC_IDLAKTXP_FEXFUNCTIONS_H_
"""

FEX_CATALOG_C_HEAD = """// idlaktxp/fexfunctionscatalog.cc

// Copyright 2013 CereProc Ltd.  (Author: Matthew Aylett)

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
// WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
// MERCHANTABLITY OR NON-INFRINGEMENT.
// See the Apache 2 License for the specific language governing permissions and
// limitations under the License.
//

// Automatically generated: $TIME$

// This file autogenerated by running create_catalog.py
// Do not edit manually

#include "./txpfexspec.h"
#include "./fexfunctions.h"

namespace kaldi {

"""

FEX_CATALOG_C_PAUSEHELP = """
// Pause behavior
// pauctx defaults to false but can be set specifically in the fex setup for each
// extraction function.
// CUR - return '0' unless function connected to a set in which case return
//       the default value for that set unless pauctx is set to true then run
//       the extraction function.
// PRE - if pause context (pauctx) is true use previous context of initial break
//       in mid utterance break pair or NONE on initial break
// PST - if pause context (pauctx) is true use post context of second break in
//       mid utterance break pair or NONE on final break
"""

FEX_CATALOG_C_TYPEHELP = """
// Return type
// INT - integer either a count or a class
// STR - a string, part of a defined set of possible values listed in
//       fex-default.xml
"""

FEX_CATALOG_C_LINES = {"lbls":"const char * const FEXFUNCLBL[] = {", \
                      "funcs":"const fexfunction FEXFUNC[] = {", \
                      "pausehand":"const enum FEXSPECPAU_TYPE FEXFUNCPAUTYPE[] = {",\
                      "type":"const enum FEXSPEC_TYPE FEXFUNCTYPE[] = {",\
                           }


def main(argv=None):
    #get arguments
    if not argv:
        argv = sys.argv

    if len(argv) < 2 or  argv[1] == '-h':
        print "python create_framework <source dir>"
        print "\te.g. cd kaldi/src/idlakfex; python create_framework ."
        sys.exit(1)
    srcdir = argv[1]
    feat_details = get_fex_details(srcdir)
    if (len(feat_details) == 0):
        print "Error: No feature code found\n"
        sys.exit(1)
    generate_fex_catalog_h(srcdir, feat_details) 
    generate_fex_catalog_c(srcdir, feat_details) 

    sys.exit(0)


if __name__ == "__main__":
    sys.exit(main())
