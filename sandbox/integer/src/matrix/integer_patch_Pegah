Index: src/matrix/character-matrix.cc
===================================================================
--- src/matrix/character-matrix.cc	(revision 1741)
+++ src/matrix/character-matrix.cc	(working copy)
@@ -5,10 +5,18 @@
   a.SetZero();
   a.Set(10);
   a.Resize(4,3,5);
-  std::cout << "row number : " << a.NumRows() << " a(0, 0) = " << a(0,0)<< std::endl ;
-  CharacterMatrix<float> b(4,3,2);
-  //CharacterMatrix<float> c(3,4,0);
-  //c.Transpose(b);
+  std::cout << "The row number is : " << a.NumRows() << " a(0, 0) = " << a(0,0)<< std::endl ;
+  CharacterMatrix<float> b(4,3,0.2);
+  CharacterMatrix<float> c(3,4,0);
+  CharacterMatrix<int> d(4,3,5) ;
+  //std::cout<<" d after change :"<<CharacterMatrix<float>::CopyFromCharacterMatrix2(b)<<std::endl;
+  d = CharacterMatrix<float>::CopyFromCharacterMatrix2(b) ;
+  std::cout<<" d(1,1) is : "<<d(1,1) << std::endl ;
+  c.Transpose(b);
+  float fVal = 60 ;
+  char cVal[32] ;
+  sprintf(cVal, "%f", fVal) ;
+  std::cout<<"cVal :"<< cVal<<std::endl ;
   //std::cout << "row number : " << c.NumRows() << " c(2, 3) = " << c(2,3)<< std::endl ;
   return 0;
 }
Index: src/matrix/character-matrix-test.cc
===================================================================
--- src/matrix/character-matrix-test.cc	(revision 1741)
+++ src/matrix/character-matrix-test.cc	(working copy)
@@ -2,9 +2,10 @@
 #include <iostream>
 int main() {
  CharacterMatrix<float> a(2, 2,1) ;
- a.SetZero() ;
- a.Set(10);
- a.Resize(10,10,5);
+ //a.SetZero() ;
+// a.Set(10);
+a.Resize(10,10,5);
+std::cout<<"next constructor"<<endl;
 // a(1,0) = 12 ;
 //CharacterMatrix<float> b(2, 2, 4) ; 
 // a.Transpose(a) ;
Index: src/matrix/integer_patch_Pegah
===================================================================
--- src/matrix/integer_patch_Pegah	(revision 0)
+++ src/matrix/integer_patch_Pegah	(revision 0)
@@ -0,0 +1,36 @@
+Index: src/matrix/character-matrix.cc
+===================================================================
+--- src/matrix/character-matrix.cc	(revision 1741)
++++ src/matrix/character-matrix.cc	(working copy)
+@@ -5,10 +5,10 @@
+   a.SetZero();
+   a.Set(10);
+   a.Resize(4,3,5);
+-  std::cout << "row number : " << a.NumRows() << " a(0, 0) = " << a(0,0)<< std::endl ;
++  std::cout << "The row number is : " << a.NumRows() << " a(0, 0) = " << a(0,0)<< std::endl ;
+   CharacterMatrix<float> b(4,3,2);
+-  //CharacterMatrix<float> c(3,4,0);
+-  //c.Transpose(b);
++  CharacterMatrix<float> c(3,4,0);
++  c.Transpose(b);
+   //std::cout << "row number : " << c.NumRows() << " c(2, 3) = " << c(2,3)<< std::endl ;
+   return 0;
+ }
+Index: src/matrix/character-matrix-test.cc
+===================================================================
+--- src/matrix/character-matrix-test.cc	(revision 1741)
++++ src/matrix/character-matrix-test.cc	(working copy)
+@@ -2,9 +2,10 @@
+ #include <iostream>
+ int main() {
+  CharacterMatrix<float> a(2, 2,1) ;
+- a.SetZero() ;
+- a.Set(10);
+- a.Resize(10,10,5);
++ //a.SetZero() ;
++// a.Set(10);
++a.Resize(10,10,5);
++std::cout<<"next constructor"<<endl;
+ // a(1,0) = 12 ;
+ //CharacterMatrix<float> b(2, 2, 4) ; 
+ // a.Transpose(a) ;
Index: src/matrix/character-matrix.h
===================================================================
--- src/matrix/character-matrix.h	(revision 1741)
+++ src/matrix/character-matrix.h	(working copy)
@@ -5,8 +5,12 @@
 #include <stdint.h>
 #include <string.h>
 #include <iostream>
+#include <limits>
+#include <math.h>
 //a trial of Matrix class with SSE multiplication. By Xiao-hui Zhang 2012/12
-
+// The code was debugged by Pegah and Ehsan 12.28.12
+// The CopyFromCharacterMatrix2 updated by Pegah and Ehsan 1.1.13 
+// The addMatMat added by Pegah and Ehsan 1.1.13
 // note from Dan: set your indent to 2 characters, not 4.
 // note from Dan: I think you need this matrix class to contain
 // floating-point (e.g. float) data members min_ and max_, which represent
@@ -46,6 +50,8 @@
   MatrixIndexT num_cols_;
   MatrixIndexT num_rows_;
   MatrixIndexT stride_;
+  T min_ ;
+  T increment_ ;
   // from Dan: if you need this function it should be called Sse4DotProduct.
   // but it probably doesn't belong here, e.g. could be a static inline function
   // declared and defined in character-matrix.cc.
@@ -88,7 +94,7 @@
   }
     
   inline MatrixIndexT NumRows() const { return num_rows_; }
-  inline MatrixIndexT NumCols() const { return num_rows_; }
+  inline MatrixIndexT NumCols() const { return num_cols_; }
   inline MatrixIndexT NumRealCols() const { return stride_; }
   // [dan]: delete clear() and empty().  We can use Resize(0, 0).
   //void
@@ -99,7 +105,9 @@
   void Resize(MatrixIndexT, MatrixIndexT, const T&);
   void CopyFromCharacterMatrix(const CharacterMatrix<T> & M);
   void Transpose(const CharacterMatrix<T> & M);
-  void MatMat(const CharacterMatrix<T> & M1, const CharacterMatrix<T> & M2);
+  void MatMat(const CharacterMatrix<T> & M1, const CharacterMatrix<T> & M2); 
+  static CharacterMatrix<int> CopyFromCharacterMatrix2(const CharacterMatrix<T> & M);
+ 
 };
  
 template<typename T>
@@ -137,7 +145,7 @@
   size = static_cast<size_t>(rows) * static_cast<size_t>(real_cols) * sizeof(T);
     
   // allocate the memory and set the right dimensions and parameters
-  assert(posix_memalign(static_cast<void**>(&data), 16, size*sizeof(T)) == 0 ); 
+  assert(posix_memalign(static_cast<void**>(&data), 16, size) == 0 ); 
   data_ = static_cast<T *> (data);
   // else what?  KALDI_ERROR? [dan]
   num_rows_ = rows;
@@ -148,17 +156,39 @@
 
 template<typename T>
 void CharacterMatrix<T>::CopyFromCharacterMatrix(const CharacterMatrix<T> & M) {
-  std::cout<<" we are here 1 "<<std::endl ;
+  std::cout<<" min : "<<std::numeric_limits<T>::min()<<std::endl ;
+  std::cout<<" we are here 1 "<<num_rows_<<M.NumRows()<<num_cols_<<M.NumCols()<<std::endl ;
+  CharacterMatrix<int> tmp1(M.NumRows(), M.NumCols(),0) ;
   assert(num_rows_ == M.NumRows() && num_cols_ == M.NumCols());
   std::cout<<" we are here 2 "<<std::endl ;
   for (MatrixIndexT row = 0; row < num_rows_; row++) {
     for (MatrixIndexT col = 0; col < num_cols_; col++) {
-      (*this)(row, col) = M(row, col);
+  //     sprintf(tmp1(row, col), "%f",M(row, col));
+	(*this)(row, col) =M(row, col);
+	
     }
   }
 }
 
 template<typename T>
+CharacterMatrix<int> CharacterMatrix<T>::CopyFromCharacterMatrix2(const CharacterMatrix<T> & M) {
+  //std::cout<<" min : "<<std::numeric_limits<T>::min()<<std::endl ;
+  //std::cout<<" we are here 1 "<<num_rows_<<M.NumRows()<<num_cols_<<M.NumCols()<<std::endl ;
+  CharacterMatrix<int> Transform(M.NumRows(), M.NumCols(),0) ;
+  int min = -1 ;
+  int max = 1 ;
+ // assert(tmp1.num_rows_ == M.NumRows() &&tmp1. num_cols_ == M.NumCols());
+  std::cout<<" we are here 2 "<<std::endl ;
+  for (MatrixIndexT row = 0; row < M.NumRows(); row++) {
+    for (MatrixIndexT col = 0; col < M.NumCols(); col++) {
+	Transform(row, col) = (int)floor((M( row, col)-min)*(255-0)/(1-(-1))) ;
+
+    }
+  }
+  std::cout<<" tmp(1,1) : "<<tmp1(1,1)<<std::endl ;
+  return Transform ;
+}
+template<typename T>
 void CharacterMatrix<T>::Transpose(const CharacterMatrix<T> & M){
   (*this).Resize(M.NumCols(), M.NumRows(), 0);
   for (MatrixIndexT row = 0; row < M.NumCols(); row++) {
