// latbin/lattice-combine.cc

// Copyright 2012  Arnab Ghoshal

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
// WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
// MERCHANTABLITY OR NON-INFRINGEMENT.
// See the Apache 2 License for the specific language governing permissions and
// limitations under the License.

// This program is for system combination using MBR decoding as described in:
// "Minimum Bayes Risk decoding and system combination based on a recursion for
// edit distance", Haihua Xu, Daniel Povey, Lidia Mangu and Jie Zhu, Computer
// Speech and Language, 2011. However, instead of averaging the posteriors, as
// described in the paper, this removes the total backward probability from the
// individual lattices being combined and outputs the union of them. The output
// should be used with lattice-mbr-decode (without any acoustic or LM scaling).
// IMPORTANT CAVEAT: the total backward probability (which is a float) is
// removed from value1_ of arc weight. So graph scores are no longer correct
// but instead only the combined acoustic and graph scores are valid. So no
// acoustic or LM scaling should be done with the output of this program.

// TODO(arnab): Individual systems are weighted equally in this program. We may
// want to have different scalings for each (or maybe we will never use it).

#include <string>
using std::string;
#include <vector>
using std::vector;

#include "util/common-utils.h"
#include "lat/kaldi-lattice.h"
#include "lat/kws-functions.h"
#include "lat/sausages.h"

namespace kaldi {

// This removes the total weight from a CompactLattice. Since the total backward
// score is in log likelihood domain, and the lattice weights are in negative
// log likelihood domain, the total weight is *added* to the weight of the final
// states. This is equivalent to dividing the probability of each path by the
// total probability over all paths.
bool CompactLatticeNormalize(CompactLattice *clat) {
  if (clat->Properties(fst::kTopSorted, false) == 0) {
    if (fst::TopSort(clat) == false) {
      KALDI_WARN << "Cycles detected in lattice: cannot normalize.";
      return false;
    }
  }
  vector<double> beta;
  if (!ComputeCompactLatticeBetas(*clat, &beta)) {
    KALDI_WARN << "Failed to compute backward probabilities on lattice.";
    return false;
  }

  typedef CompactLattice::Arc::StateId StateId;
  StateId start = clat->Start();  // Should be 0
  BaseFloat total_backward_cost = beta[start];

  for (fst::StateIterator<CompactLattice> sit(*clat); !sit.Done(); sit.Next()) {
    CompactLatticeWeight f = clat->Final(sit.Value());
    LatticeWeight w = f.Weight();
    w.SetValue1(w.Value1() + total_backward_cost);
    f.SetWeight(w);
    clat->SetFinal(sit.Value(), f);
  }
  return true;
}

}  // end namespace kaldi


int main(int argc, char *argv[]) {
  try {
    using namespace kaldi;
    typedef kaldi::int32 int32;

    const char *usage =
        "Combine lattices generated by different systems by removing the total\n"
        "cost of all paths (backward cost) from individual lattices and doing\n"
        "a union of the reweighted lattices.\n"
        "Usage: lattice-combine [options] lattice-wspecifier lattice-rspecifier1"
        " lattice-rspecifier2 [lattice-rspecifier3 ... ]\n";

    ParseOptions po(usage);
    BaseFloat acoustic_scale = 1.0;
    po.Register("acoustic-scale", &acoustic_scale, "Scaling factor for "
                "acoustic likelihoods");
    po.Read(argc, argv);

    int32 num_args = po.NumArgs();
    if (num_args < 3) {
      po.PrintUsage();
      exit(1);
    }

    string lats_wspecifier = po.GetArg(1),
        lats_rspecifier1 = po.GetArg(2);

    // Output
    CompactLatticeWriter clat_writer(lats_wspecifier);

    // Inputs
    SequentialCompactLatticeReader clat_reader1(lats_rspecifier1);
    vector<RandomAccessCompactLatticeReader*> clat_reader_vec(num_args-2, NULL);
    vector<string> clat_rspec_vec(num_args-2);
    for (int32 i = 3; i <= num_args; ++i) {
      clat_reader_vec[i-3] = new RandomAccessCompactLatticeReader(po.GetArg(i));
      clat_rspec_vec[i-3] = po.GetArg(i);
    }

    int32 n_utts = 0, n_total_lats = 0, n_success = 0, n_missing = 0,
        n_other_errors = 0;

    for (; !clat_reader1.Done(); clat_reader1.Next()) {
      std::string key = clat_reader1.Key();
      CompactLattice clat1 = clat_reader1.Value();
      clat_reader1.FreeCurrent();
      n_utts++;
      n_total_lats++;
      bool success = CompactLatticeNormalize(&clat1);
      if (!success) {
        KALDI_WARN << "Could not normalize lattice for system 1, utterance: "
                   << key;
        n_other_errors++;
        continue;
      }

      for (int32 i = 0; i < num_args-2; ++i) {
        if (clat_reader_vec[i]->HasKey(key)) {
          CompactLattice clat2 = clat_reader_vec[i]->Value(key);
          n_total_lats++;
          success = CompactLatticeNormalize(&clat2);
          if (!success) {
            KALDI_WARN << "Could not normalize lattice for system "<< (i + 2)
                       << ", utterance: " << key;
            n_other_errors++;
            continue;
          }
          fst::Union(&clat1, clat2);
        } else {
          KALDI_WARN << "No lattice found for utterance " << key << " for "
                     << "system " << (i + 2) << ", rspecifier: "
                     << clat_rspec_vec[i];
          n_missing++;
        }
      }

      clat_writer.Write(key, clat1);
      n_success++;
    }

    KALDI_LOG << "Processed " << n_utts << " utterances: with a total of "
              << n_total_lats << " lattices across " << (num_args-1)
              << " different systems";
    KALDI_LOG << "Produced output for " << n_success << " utterances; "
              << n_missing << " total missing lattices and " << n_other_errors
              << " total lattices had errors in processing.";
    DeletePointers(&clat_reader_vec);
    return (n_success != 0 ? 0 : 1);
  } catch(const std::exception &e) {
    std::cerr << e.what();
    return -1;
  }
}
